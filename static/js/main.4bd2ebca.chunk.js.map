{"version":3,"sources":["state/color/index.ts","state/canvas/index.ts","state/index.ts","views/Appbar/index.tsx","views/ColorPullet/index.tsx","views/Canvas/index.tsx","views/Home/index.tsx","views/App.tsx","theme.tsx","index.tsx"],"names":["Colors","initialState","pulletColor","Gray","colorSlice","createSlice","name","reducers","reset","setColor","state","action","payload","dots","Array","fill","White","canvasSlice","changeDotColor","y","x","color","store","configureStore","reducer","canvas","actions","useAppSelector","useSelector","useAppDispatch","useDispatch","Appbar","AppBar","position","Toolbar","Typography","variant","ColorPullet","dispatch","changeColor","useCallback","_","ToggleButtonGroup","size","value","exclusive","onChange","Object","values","map","index","ToggleButton","key","Brightness1","style","Canvas","rowStyle","clear","display","dotStyle","dot","border","float","height","width","margin","backgroundColor","cardStyle","colors","grey","paddingBottom","Card","CardContent","row","onClick","Home","Fragment","Grid","container","justify","App","basename","process","exact","path","theme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","type","render","ThemeProvider","CssBaseline","Container","maxWidth","document","getElementById"],"mappings":"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","file":"static/js/main.4bd2ebca.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport enum Colors {\n  Gray = '#616161',\n  Red = '#ff8a80',\n  Blue = '#82b1ff',\n  Green = '#b9f6ca',\n  Yellow = '#ffff8d',\n  White = '#f5f5f5',\n}\n\ntype Color = {\n  pulletColor: Colors\n}\n\nconst initialState: Color = {\n  pulletColor: Colors.Gray\n}\n\nconst colorSlice = createSlice({\n  name: 'color',\n  initialState,\n  reducers: {\n    reset: () => initialState,\n    setColor: (state, action: PayloadAction<Colors>) => {\n      state.pulletColor = action.payload\n    }\n  }\n})\n\nexport default colorSlice\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { Colors } from 'state/color'\n\n\ntype Dots = Array<Array<Colors>>\n\ntype Canvas = {\n  dots: Dots\n}\n\nconst initialState: Canvas = {\n  dots: Array(9).fill(Array(9).fill(Colors.White))\n}\n\nconst canvasSlice = createSlice({\n  name: \"canvas\",\n  initialState,\n  reducers: {\n    changeDotColor: (state, action: PayloadAction<{y:number, x:number, color:Colors}>) => {\n      state.dots[action.payload.y][action.payload.x] = action.payload.color\n    }\n  }\n})\n\nexport default canvasSlice\n","import { configureStore } from '@reduxjs/toolkit'\nimport { useSelector, useDispatch } from 'react-redux'\nimport colorSlice from 'state/color'\nimport canvas from 'state/canvas'\n\nexport const store = configureStore({\n  reducer: {\n    [colorSlice.name]: colorSlice.reducer,\n    [canvas.name]: canvas.reducer,\n  }\n})\n\nexport const actions = {\n  [colorSlice.name]: colorSlice.actions,\n  [canvas.name]: canvas.actions,\n}\n\nexport type AppState = ReturnType<typeof store.getState>\nexport const useAppSelector: <TSelected>(\n  selector: (state: AppState) => TSelected,\n  equalityFn?: (left: TSelected, right: TSelected) => boolean,\n) => TSelected = useSelector\n\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n","import React from 'react'\nimport { AppBar, Toolbar, Typography } from '@material-ui/core'\n\nconst Appbar: React.FC = () => {\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h5\" color=\"textSecondary\">\n          ドット絵ジェネレーター\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nexport default Appbar\n","import React, { useCallback } from 'react'\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab'\nimport { Brightness1 } from '@material-ui/icons'\n\nimport { useAppSelector, useAppDispatch, actions } from 'state'\nimport { Colors } from 'state/color'\n\nconst ColorPullet: React.FC = () => {\n  const color = useAppSelector(state => state.color)\n\n  const dispatch = useAppDispatch()\n  const changeColor = useCallback(\n    (_:React.MouseEvent<HTMLElement, MouseEvent>, color: Colors) => {\n      if (color !== null) dispatch(actions.color.setColor(color))\n    }, [dispatch]\n  )\n\n  return (\n    <ToggleButtonGroup size=\"small\" value={color.pulletColor} exclusive onChange={changeColor}>\n      {\n        Object.values(Colors).map((color, index) => {\n          return (\n            <ToggleButton key={index} value={color}>\n              <Brightness1 style={{color: color}}/>\n            </ToggleButton>\n          )\n        })\n      }\n    </ToggleButtonGroup>\n  )\n}\n\nexport default ColorPullet\n","import React, { useCallback, CSSProperties } from 'react'\nimport { Card, CardContent, colors } from '@material-ui/core'\n\nimport { useAppSelector, useAppDispatch, actions, AppState } from 'state'\n\n\ntype Color = AppState['color']['pulletColor']\n\nconst Canvas: React.FC = () => {\n  const dots = useAppSelector(state => state.canvas.dots)\n  const color = useAppSelector(state => state.color.pulletColor)\n\n  const dispatch = useAppDispatch()\n  const changeDotColor = useCallback(\n    (y: number, x: number) => () => {\n      dispatch(actions.canvas.changeDotColor({y, x, color}))\n    }, [dispatch, color]\n  )\n\n  const rowStyle: CSSProperties = {\n    clear: \"both\",\n    display: \"table\",\n  }\n\n  const dotStyle = useCallback(\n    (dot: Color): React.CSSProperties => ({\n      border: \"none\",\n      float: \"left\",\n      height: 25,\n      width: 25,\n      margin: -1,\n      backgroundColor: dot\n    }), []\n  )\n\n  const cardStyle: CSSProperties = {\n    backgroundColor: colors.grey[300],\n    paddingBottom: 16\n  }\n\n  return (\n    <Card>\n      <CardContent style={cardStyle}>\n        { dots.map((row, y) => (\n          <div key={y} style={rowStyle}>\n            {\n              row.map((dot, x) => (\n                <div key={x} style={dotStyle(dot)} onClick={changeDotColor(y, x)} />\n              ))\n            }\n          </div>\n        )) }\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default Canvas\n","import React from 'react'\nimport { Grid, Card, CardContent } from '@material-ui/core'\n\nimport Appbar from 'views/Appbar'\nimport ColorPullet from 'views/ColorPullet'\nimport Canvas from 'views/Canvas'\n\nconst Home: React.FC = () => {\n  return (\n    <React.Fragment>\n      <Appbar/>\n      <Card>\n        <CardContent>\n          <Grid container justify=\"center\">\n            <ColorPullet/>\n          </Grid>\n        </CardContent>\n        <CardContent>\n          <Grid container justify=\"center\">\n            <Canvas/>\n          </Grid>\n        </CardContent>\n      </Card>\n    </React.Fragment>\n  )\n}\n\nexport default Home\n","import React from 'react'\nimport { BrowserRouter, Route } from 'react-router-dom'\n\nimport Home from 'views/Home'\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Route exact path=\"/\"><Home/></Route>\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","import { createMuiTheme } from '@material-ui/core'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary : {\n      light: '#58a5ef',\n      main: '#0277bc',\n      dark: '#004c8b',\n      contrastText: '#ffffff',\n    },\n    secondary : {\n      light: '#ffff72',\n      main: '#ffeb3b',\n      dark: '#c8b900',\n      contrastText: '#000000',\n    },\n    type: 'dark'\n  }\n})\n\nexport default theme\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { ThemeProvider, CssBaseline, Container } from '@material-ui/core'\nimport { store } from 'state'\n\nimport App from 'views/App'\nimport theme from 'theme'\n\nrender(\n  <ThemeProvider theme={theme}>\n    <Provider store={store}>\n      <CssBaseline/>\n      <Container maxWidth=\"sm\">\n        <App/>\n      </Container>\n    </Provider>\n  </ThemeProvider>\n  , document.getElementById('root')\n)\n"],"sourceRoot":""}